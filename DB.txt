USE library_db;

用户表：
CREATE TABLE readers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    openid VARCHAR(255) NOT NULL UNIQUE,
    reader_card VARCHAR(20) NOT NULL COMMENT '读者证号',
    reader_type VARCHAR(20) NOT NULL COMMENT '读者类型',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
全部书籍表：
CREATE TABLE books (
    id INT PRIMARY KEY,
    marc_rec_no INT,
    title VARCHAR(255),
    author VARCHAR(255),
    call_number VARCHAR(100),
    asset_number_range VARCHAR(50),
    barcode_range VARCHAR(50),
    isbn VARCHAR(50),
    publisher VARCHAR(255),
    publish_year VARCHAR(50),
    volume_count INT,
    total_price DECIMAL(10, 2),
    total_actual_price DECIMAL(10, 2),
    location VARCHAR(255),
    marc_status VARCHAR(50),
    document_type VARCHAR(50),
    source_created_at VARCHAR(50),
    source_created_by VARCHAR(50),
    updated_at VARCHAR(50),
    updated_by VARCHAR(50),
    简介 TEXT
);
推荐历史表：
CREATE TABLE IF NOT EXISTS recommend_history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    reader_id VARCHAR(50) NOT NULL,
    book_call_no VARCHAR(100) NOT NULL,
    book_title VARCHAR(255) NOT NULL,
    book_author VARCHAR(255),
    book_publisher VARCHAR(255),
    book_isbn VARCHAR(255),
    recommend_time DATETIME NOT NULL,
    INDEX idx_reader_id (reader_id),
    INDEX idx_recommend_time (recommend_time)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


-- 感悟表
CREATE TABLE reflections (
    id INT AUTO_INCREMENT PRIMARY KEY,
    content TEXT NOT NULL COMMENT '感悟内容',
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '发布时间',
    book_id INT NOT NULL COMMENT '关联的书籍序号',
    reader_id INT NOT NULL COMMENT '发布的读者ID',
    FOREIGN KEY (book_id) REFERENCES books(序号) ON DELETE CASCADE,
    FOREIGN KEY (reader_id) REFERENCES readers(id) ON DELETE CASCADE
);

-- 点赞记录表
CREATE TABLE likes (
    reader_id INT NOT NULL COMMENT '点赞的读者ID',
    reflection_id INT NOT NULL COMMENT '被点赞的感悟ID',
    PRIMARY KEY (reader_id, reflection_id),
    FOREIGN KEY (reader_id) REFERENCES readers(id) ON DELETE CASCADE,
    FOREIGN KEY (reflection_id) REFERENCES reflections(id) ON DELETE CASCADE
);

